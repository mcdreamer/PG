cmake_minimum_required(VERSION 3.0)

set(PG_CMAKE_DIR ${CMAKE_CURRENT_LIST_DIR})

function(pg_set_app_link_libs)

set(BASE_APP_LINK_LIBS PG pile snappy)

if (APPLE)

SET(SFMLAUDIO "${PG_CMAKE_DIR}/../internal/sfml/Frameworks/sfml-audio.framework")
SET(SFMLSYSTEM "${PG_CMAKE_DIR}/../internal/sfml/Frameworks/sfml-system.framework")
SET(SFMLGRAPHICS "${PG_CMAKE_DIR}/../internal/sfml/Frameworks/sfml-graphics.framework")
SET(SFMLWINDOW "${PG_CMAKE_DIR}/../internal/sfml/Frameworks/sfml-window.framework")

set(PLATFORM_LIBS "objc -framework Foundation -framework Cocoa")

endif()

if (WIN32)

SET(SFMLAUDIO "${PG_CMAKE_DIR}/../internal/sfml/lib/sfml-audio.lib")
SET(SFMLSYSTEM "${PG_CMAKE_DIR}/../internal/sfml/lib/sfml-system.lib")
SET(SFMLGRAPHICS "${PG_CMAKE_DIR}/../internal/sfml/lib/sfml-graphics.lib")
SET(SFMLWINDOW "${PG_CMAKE_DIR}/../internal/sfml/lib/sfml-window.lib")

file(COPY "${PG_CMAKE_DIR}/../internal/sfml/bin/sfml-audio-2.dll" DESTINATION "${CMAKE_BINARY_DIR}")
file(COPY "${PG_CMAKE_DIR}/../internal/sfml/bin/sfml-system-2.dll" DESTINATION "${CMAKE_BINARY_DIR}")
file(COPY "${PG_CMAKE_DIR}/../internal/sfml/bin/sfml-graphics-2.dll" DESTINATION "${CMAKE_BINARY_DIR}")
file(COPY "${PG_CMAKE_DIR}/../internal/sfml/bin/sfml-window-2.dll" DESTINATION "${CMAKE_BINARY_DIR}")
file(COPY "${PG_CMAKE_DIR}/../internal/sfml/bin/openal32.dll" DESTINATION "${CMAKE_BINARY_DIR}")

endif()

set(INTERNAL_LINK_LIBS ${SFMLAUDIO} ${SFMLSYSTEM} ${SFMLGRAPHICS} ${SFMLWINDOW} PARENT_SCOPE)
set(APP_LINK_LIBS ${BASE_APP_LINK_LIBS} ${PLATFORM_LIBS} ${SFMLAUDIO} ${SFMLSYSTEM} ${SFMLGRAPHICS} ${SFMLWINDOW} PARENT_SCOPE)

endfunction()


function(pg_setup)

set(JSON_CPP "${PG_CMAKE_DIR}/../thirdparty/jsoncpp/dist/jsoncpp.cpp")

execute_process(
  WORKING_DIRECTORY "${PG_CMAKE_DIR}/../thirdparty/jsoncpp/"
  COMMAND python amalgamate.py
)

set(INTERNAL_CPP ${JSON_CPP} PARENT_SCOPE)

endfunction()


function(build_pg_app SRCS RESOURCES_DIR RESOURCES_JSON APP_NAME APP_ID)

set(STOCKPILE_DIR "${PG_CMAKE_DIR}/../thirdparty/stockpile/stockpile")

set(SNAPPY_BUILD_TESTS OFF CACHE BOOL "")

set(CMAKE_BUILD_TYPE RELEASE)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_subdirectory(${PG_CMAKE_DIR} "./PG")
add_subdirectory("${STOCKPILE_DIR}/tool" "./stockpiletool")

include("${STOCKPILE_DIR}/build/stockpile_cmake.txt")

set(BOOST_ROOT $ENV{BOOST_DIR})
set(Boost_USE_STATIC_LIBS ON)
set(Boost_USE_MULTITHREADED ON)
find_package(Boost COMPONENTS filesystem system REQUIRED)

include_directories(
  "../"
  ${Boost_INCLUDE_DIRS}
)

set(PILE_OUTPUT resources.pile)

build_pile(
  stockpiletool
  ${RESOURCES_DIR}/${RESOURCES_JSON}
  ${RESOURCES_DIR}
  ${PILE_OUTPUT}
)

set_source_files_properties(${PILE_OUTPUT} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)

pg_setup()
pg_set_app_link_libs()

add_executable(${APP_NAME} "${INTERNAL_CPP}" "${SRCS}" ${PILE_OUTPUT})

target_link_libraries(${APP_NAME} ${APP_LINK_LIBS} ${Boost_LIBRARIES})

set_target_properties(${APP_NAME} PROPERTIES
  MACOSX_BUNDLE TRUE
  MACOSX_FRAMEWORK_IDENTIFIER ${APP_ID}
)
endfunction()